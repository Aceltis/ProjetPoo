//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using System.Drawing;
    using MVVM;

    public class City : ObservableObject, ICity
    {
        private String _name;
        public virtual String Name
        {
            get { return this._name; }
            set { this.SetAndNotify(ref this._name, value, () => this._name); }
        }

        private int _population;
        public virtual int Population
        {
            get { return this._population; }
            set { this.SetAndNotify(ref this._population, value, () => this._population); }
        }

        private int _ownedMinerals;
        public virtual int OwnedMinerals
        {
            get { return this._ownedMinerals; }
            set { this.SetAndNotify(ref this._ownedMinerals, value, () => this._ownedMinerals); }
        }

        private int _ownedFoods;
        public virtual int OwnedFoods
        {
            get { return this._ownedFoods; }
            set { this.SetAndNotify(ref this._ownedFoods, value, () => this._ownedFoods); }
        }

        public virtual ICase Position { get; set; }
        public virtual IPlayer Player { get; set; }
        public virtual ProductionType Current_prod { get; set; }
        //Attribut correspondant aux minéraux encore à accumuler pour spawn l'unité en prod
        public virtual int Needed_minerals { get; set; }

        public City(IPlayer p, ICase c)
        {
            Population = 1;
            Position = c;
            Player = p;
            if (!p.builtHisFirstCity)
                p.builtHisFirstCity = true;
            Current_prod = ProductionType.None;
            OwnedFoods = c.Foods;
            OwnedMinerals = c.Minerals;
        }

        public virtual void updateCity(IMap map)
        {
            //Variables food/minerals du tour
            Dictionary<ICase, int> cityCasesFood = new Dictionary<ICase, int>();
            Dictionary<ICase, int> cityCasesMinerals = new Dictionary<ICase, int>();

            //Cases dans le périmètre
            int posIndex = Position.SqPos[0] + map.mapStrategy.width * Position.SqPos[1];
            for (int k = -3; k <= 3; k++)
            {
                //Tests en cas de bord de map horizontal
                bool cond1 = ((k <= 0) || ((posIndex % map.mapStrategy.width) + k) < map.mapStrategy.width);
                bool cond2 = ((k >= 0) || ((posIndex % map.mapStrategy.width) + k) >= 0);
                if (cond1 && cond2)
                {
                    for (int l = -3 + Math.Abs(k); l <= 3 - Math.Abs(k); l++)
                    {
                        //Test en cas de bord de map vertical + comparaison unité
                        if ((posIndex + k + map.mapStrategy.width * l >= 0) && (posIndex + k + map.mapStrategy.width * l < map.grid.Count))
                        {
                            //Ajout des cases du périmètre dans le dictionnaire
                            cityCasesFood.Add(map.grid[posIndex + k + map.mapStrategy.width * l], map.grid[posIndex + k + map.mapStrategy.width * l].Foods);
                            cityCasesMinerals.Add(map.grid[posIndex + k + map.mapStrategy.width * l], map.grid[posIndex + k + map.mapStrategy.width * l].Minerals);
                        }
                    }
                }
            }
            //Dictionnaires temporaires pour garder les valeurs disponibles
            Dictionary<ICase, int> tempCityCasesFood = cityCasesFood;
            Dictionary<ICase, int> tempCityCasesMinerals = cityCasesMinerals;

            //Calcul du max possible en mineraux
            int maxMinerals = tempCityCasesMinerals.Max(x => x.Value);
            for (int j = 0; j < Population+ 1; j++)
            {
                tempCityCasesMinerals.Remove(tempCityCasesMinerals.ElementAt(tempCityCasesMinerals.Max(x => x.Value)).Key);
                maxMinerals += tempCityCasesMinerals.Max(x => x.Value);
            }

            int maxFood = 0;
            //sur le nombre de cases disponibles (pop)
            for (int i = 0; i < Population + 3; i++)
            {
                //Si excès de minéraux, tenter de basculer des cases vers le food
                if (Needed_minerals < maxMinerals)
                {
                    maxMinerals = 0; maxFood = 0;
                    tempCityCasesFood = cityCasesFood;
                    tempCityCasesMinerals = cityCasesMinerals;

                    maxMinerals = tempCityCasesMinerals.Max(x => x.Value);
                    for (int j = 0; j < Population + 1 - i; j++)
                    {
                        tempCityCasesMinerals.Remove(tempCityCasesMinerals.ElementAt(tempCityCasesMinerals.Max(x => x.Value)).Key);
                        maxMinerals += tempCityCasesMinerals.Max(x => x.Value);
                    }
                    //On bascule i cases
                    for (int j = 0; j < i; j++)
                    {
                        maxFood += tempCityCasesFood.Max(x => x.Value);
                        tempCityCasesFood.Remove(tempCityCasesFood.ElementAt(tempCityCasesFood.Max(x => x.Value)).Key);
                    }
                }

                //Sinon on revient un coup en arrière
                else
                {
                    if (i != 0)
                    {
                        maxMinerals = 0; maxFood = 0;
                        tempCityCasesFood = cityCasesFood;
                        tempCityCasesMinerals = cityCasesMinerals;

                        maxMinerals = tempCityCasesMinerals.Max(x => x.Value);
                        for (int j = 0; j < Population + 1 - i - 1; j++)
                        {
                            tempCityCasesMinerals.Remove(tempCityCasesMinerals.ElementAt(tempCityCasesMinerals.Max(x => x.Value)).Key);
                            maxMinerals += tempCityCasesMinerals.Max(x => x.Value);
                        }
                        //On bascule i cases
                        for (int j = 0; j < i - 1; j++)
                        {
                            maxFood += tempCityCasesFood.Max(x => x.Value);
                            tempCityCasesFood.Remove(tempCityCasesFood.ElementAt(tempCityCasesFood.Max(x => x.Value)).Key);
                        }
                    }
                    break;
                }
            }

            Needed_minerals -= maxMinerals;
            OwnedMinerals = maxMinerals;
            OwnedFoods = maxFood;

            if (Needed_minerals <= 0)
                spawnUnit(Current_prod);


            //Reniew population number
            updatePopulation();
        }
        
        public virtual void produceBoss()
        {
            Needed_minerals = 200;
            Current_prod = ProductionType.Boss;
        }

        public virtual void produceStudent()
        {
            Needed_minerals = 100;
            Current_prod = ProductionType.Student;
        }

        public virtual void produceTeacher()
        {
            Needed_minerals = 60;
            Current_prod = ProductionType.Teacher;
        }

        public virtual void updatePopulation()
        {
            int nbResNeeded = 10;
            if (Population >= 1)
            {
                for (int i = 0; i < Population - 1; i++)
                    nbResNeeded += nbResNeeded / 2;
            }

            if (OwnedFoods >= nbResNeeded)
                Population++;
        }

        public virtual void changeOwner(IPlayer newOwner)
        {
            Player.Cities.Remove(this);
            Player = newOwner;
            Player.Cities.Add(this);
        }

        public virtual void spawnUnit(ProductionType type)
        {
            switch (type)
            {
                case ProductionType.Boss :
                    switch (Player.Civilization)
                    {
                        case CivilizationType.EII:
                            BossEII newBossEII = new BossEII(Player, Position);
                            Player.Boss = newBossEII;
                            Position.Units.Add(newBossEII);
                            break;
                        case CivilizationType.INFO:
                            BossINFO newBossINFO = new BossINFO(Player, Position);
                            Player.Boss = newBossINFO;
                            Position.Units.Add(newBossINFO);
                            break;
                    }
                    break;
                case ProductionType.Student:
                    switch (Player.Civilization)
                    {
                        case CivilizationType.EII:
                            StudentEII newStudentEII = new StudentEII(Player, Position);
                            Player.Students.Add(newStudentEII);
                            Position.addUnit(newStudentEII);
                            break;
                        case CivilizationType.INFO:
                            StudentINFO newStudentINFO = new StudentINFO(Player, Position);
                            Player.Students.Add(newStudentINFO);
                            Position.addUnit(newStudentINFO);
                            break;
                    }
                    break;
                case ProductionType.Teacher :
                    switch (Player.Civilization)
                    {
                        case CivilizationType.EII:
                            TeacherEII newTeacherEII = new TeacherEII(Player, Position);
                            Player.Teachers.Add(newTeacherEII);
                            Position.addUnit(newTeacherEII);
                            break;
                        case CivilizationType.INFO:
                            TeacherINFO newTeacherINFO = new TeacherINFO(Player, Position);
                            Player.Teachers.Add(newTeacherINFO);
                            Position.addUnit(newTeacherINFO);
                            break;
                    }
                    break;
            }
            Current_prod = ProductionType.None;
        }

        public virtual void afficher(object sender, PaintEventArgs e, ICaseImageFlyweight fw, int x, int y)
        {
            e.Graphics.DrawImage(fw.getCityImage((int)Player.Color), x, y, 50, 50);
        }
    }
}

