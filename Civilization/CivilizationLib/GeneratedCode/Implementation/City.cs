//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using System.Drawing;
    using MVVM;

    public class City : ObservableObject, ICity
    {
        private String _name;
        public virtual String Name
        {
            get { return this._name; }
            set { this.SetAndNotify(ref this._name, value, () => this._name); }
        }

        private int _population;
        public virtual int Population
        {
            get { return this._population; }
            set { this.SetAndNotify(ref this._population, value, () => this._population); }
        }

        private int _ownedMinerals;
        public virtual int OwnedMinerals
        {
            get { return this._ownedMinerals; }
            set { this.SetAndNotify(ref this._ownedMinerals, value, () => this._ownedMinerals); }
        }

        private int _ownedFoods;
        public virtual int OwnedFoods
        {
            get { return this._ownedFoods; }
            set { this.SetAndNotify(ref this._ownedFoods, value, () => this._ownedFoods); }
        }

        public virtual ICase Position { get; set; }
        public virtual IPlayer Player { get; set; }
        public virtual ProductionType Current_prod { get; set; }


        public virtual void produceBoss(IUnit unit)
        {
            if (Current_prod == ProductionType.None && OwnedMinerals >= 200)
            {
                Current_prod = ProductionType.Boss;

                if (unit.Cost == 0)
                {
                    spawnUnit(unit);
                }
            }
        }

        public City(IPlayer p, ICase c)
        {
            Population = 1;
            Position = c;
            Player = p;
            Current_prod = ProductionType.None;
            OwnedFoods = c.Foods;
            OwnedMinerals = c.Minerals;
        }

        public virtual void produceStudent()
        {
            throw new System.NotImplementedException();
        }

        public virtual void produceTeacher()
        {
            throw new System.NotImplementedException();
        }

        public virtual void changeProduction()
        {
            throw new System.NotImplementedException();
        }

        public virtual void upgradePopulation()
        {
            throw new System.NotImplementedException();
        }

        public virtual void spawnUnit(IUnit unit)
        {
            throw new System.NotImplementedException();
        }

        public virtual void afficher(object sender, PaintEventArgs e, ICaseImageFlyweight fw, int x, int y)
        {
            e.Graphics.DrawImage(fw.getCityImage((int)Player.Color), x, y, 50, 50);
        }
    }
}

