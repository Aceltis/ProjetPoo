//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class GameBuilder : IGameBuilder
	{
        private Queue<IPlayer> Players;
        public IMap Map { get; set; }

        public GameBuilder(int players, List<String> names, List<String> civs)
        {
            createPlayers(players, names, civs);
            createMap(players);
        }

		public virtual void createMap(int players)
		{
            if (players > 2)
            {
                Map = new Map();
                Map.setMapStrategy(new LargeMapStrategy());
                Map.createMap();
            }
            else
            {
                Map = new Map();
                Map.setMapStrategy(new SmallMapStrategy());
                Map.createMap();
                Map.grid[60].addUnit(new TeacherEII(Players.First(), Map.grid[60]));
                Map.grid[45].addUnit(new StudentEII(Players.First(), Map.grid[45]));
                Map.grid[75].addUnit(new TeacherEII(Players.First(), Map.grid[75]));
                Map.grid[30].addUnit(new TeacherEII(Players.First(), Map.grid[30]));
                Map.grid[100].city = new City(Players.First(), Map.grid[100]);
            }
		}

		public virtual void createPlayers(int players, List<String> names, List<String> civs)
		{
            Players = new Queue<IPlayer>();

            if (players == 2)
            {
                Players.Enqueue(new Player(names[0], civs[0], PlayerColor.Red));
                Players.Enqueue(new Player(names[1], civs[1], PlayerColor.Blue));
            }
            else if (players == 3)
            {
                Players.Enqueue(new Player(names[0], civs[0], PlayerColor.Red));
                Players.Enqueue(new Player(names[1], civs[1], PlayerColor.Blue));
                Players.Enqueue(new Player(names[2], civs[2], PlayerColor.Orange));
            }
            else
            {
                Players.Enqueue(new Player(names[0], civs[0], PlayerColor.Red));
                Players.Enqueue(new Player(names[1], civs[1], PlayerColor.Blue));
                Players.Enqueue(new Player(names[2], civs[2], PlayerColor.Orange));
                Players.Enqueue(new Player(names[3], civs[3], PlayerColor.Green));
            }
		}

        public virtual IGame build()
        {
            return new Game(Players, Map);
        }

	}
}

