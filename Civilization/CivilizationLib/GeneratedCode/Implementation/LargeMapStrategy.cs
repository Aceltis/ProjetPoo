//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Wrapper;

	public class LargeMapStrategy : MapStrategy, ILargeMapStrategy
	{
        public LargeMapStrategy()
        {
            height = 100;
            width = 100;
        }

        unsafe public override void createMap(List<ICase> map, Queue<IPlayer> players)
        {
            WrapperAlgo algo = new WrapperAlgo();
            CaseFactory factory = new CaseFactory();
            int** algoMap = algo.createMap(height, width);
            int** algoBonusesMap = algo.createBonusesMap(height, width, 0.05);
            for (int j = 0; j < height; j++)
            {
                for (int i = 0; i < width; i++)
                {
                    ICase newCase = factory.makeCase(algoMap[i][j]);
                    newCase.sqPos = new int[2] { i, j };

                    switch (algoBonusesMap[i][j])
                    {
                        case 1:
                            ICaseDecorator newFruitCase = new Fruit(newCase);
                            map.Add(newFruitCase);
                            break;
                        case 2:
                            ICaseDecorator newIronCase = new Iron(newCase);
                            map.Add(newIronCase);
                            break;
                        default:
                            map.Add(newCase);
                            break;
                    }
                }
            }

            //Ajout des unités initiales
            int** algoPosInit = algo.giveInitPos(height, width, players.Count);

            foreach (IPlayer player in players)
            {
                int i = algoPosInit[(int)player.Color][0], j = algoPosInit[(int)player.Color][1];
                switch (player.Civilization)
                {
                    case CivilizationType.EII:
                        TeacherEII firstTeacherEII = new TeacherEII(player, map[i + width * j]);
                        StudentEII firstStudentEII = new StudentEII(player, map[i + width * j]);
                        map[i + width * j].addUnit(firstTeacherEII);
                        map[i + width * j].addUnit(firstStudentEII);
                        player.Teachers.Add(firstTeacherEII);
                        player.Students.Add(firstStudentEII);
                        break;
                    case CivilizationType.INFO:
                        TeacherINFO firstTeacherINFO = new TeacherINFO(player, map[i + width * j]);
                        StudentINFO firstStudentINFO = new StudentINFO(player, map[i + width * j]);
                        map[i + width * j].addUnit(firstTeacherINFO);
                        map[i + width * j].addUnit(firstStudentINFO);
                        player.Teachers.Add(firstTeacherINFO);
                        player.Students.Add(firstStudentINFO);
                        break;
                    default:
                        throw new ArgumentException();
                }
            }
        }

	}
}

