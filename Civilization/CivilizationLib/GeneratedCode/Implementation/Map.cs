//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using System.Windows.Forms;
    using System.Drawing;

    public class Map : IMap
    {

        public virtual List<ICase> grid { get; set; }
        private IMapStrategy mapStrategy;
        private CaseImageFlyweight FWimages;

        public Map()
        {
            grid = new List<ICase>();
            FWimages = new CaseImageFlyweight();
        }

        public void setMapStrategy(IMapStrategy mapStrategy)
        {
            this.mapStrategy = mapStrategy;
        }


        public void createMap()
        {
            mapStrategy.createMap(grid);
        }

        public void afficher(object sender, PaintEventArgs e)
        {
            for (int i = 0; i < grid.Count; i++)
            {
                int x = 50 * grid[i].sqPos[0];
                int y = 50 * grid[i].sqPos[1];
                grid[i].afficher(sender, e, FWimages);

                //Affichage des unités
                foreach (IUnit unit in grid[i].units)
                    if(grid[i].Visible)
                        unit.afficher(sender, e, FWimages, x, y);

                //Affichage de la ville
                if (grid[i].city != null && grid[i].Visible)
                    grid[i].city.afficher(sender, e, FWimages, x, y);

                //Surligne la case
                //Doit être mis ici pour être 100% sûr que cela soit ce qui s'affiche en DERNIER
                //et aussi éviter les répétitions
                if (grid[i].Selected)
                {
                    Pen brown = new Pen(Color.SaddleBrown, 2);
                    e.Graphics.DrawRectangle(brown, x + 1, y + 1, 48, 48);
                }
            }
        }

        public void select(int x, int y)
        {
            foreach (Case c in grid)
                c.Selected = false;
            int x_pos = x / 50;
            int y_pos = y / 50;
            grid[x_pos + (int)Math.Sqrt((double)grid.Count) * y_pos].Selected = true;
        }
    }
}

