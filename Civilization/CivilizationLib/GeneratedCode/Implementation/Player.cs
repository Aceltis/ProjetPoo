//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using MVVM;

    public class Player : ObservableObject, IPlayer
    {
        private string _name;
        public virtual string Name
        {
            get { return this._name; }
            set { this.SetAndNotify(ref this._name, value, () => this._name); }
        }

        private CivilizationType _civilization;
        public virtual CivilizationType Civilization 
        {
            get { return this._civilization; }
            set { this.SetAndNotify(ref this._civilization, value, () => this._civilization); }
        }

        private List<ICity> _cities;
        public virtual List<ICity> Cities
        {
            get { return this._cities; }
            set { this.SetAndNotify(ref this._cities, value, () => this._cities); }
        }

        private IBoss _boss;
        public virtual IBoss Boss
        {
            get { return this._boss; }
            set { this.SetAndNotify(ref this._boss, value, () => this._boss); }
        }

        private List<IStudent> _students;
        public virtual List<IStudent> Students
        {
            get { return this._students; }
            set { this.SetAndNotify(ref this._students, value, () => this._students); }
        }

        private List<ITeacher> _teachers;
        public virtual List<ITeacher> Teachers
        {
            get { return this._teachers; }
            set { this.SetAndNotify(ref this._teachers, value, () => this._teachers); }
        }

        public virtual StatusType Status { get; set; }

        private Implementation.PlayerColor _color;
        public virtual Implementation.PlayerColor Color
        {
            get { return this._color; }
            set { this.SetAndNotify(ref this._color, value, () => this._color); }
        }

        public Player(String name, String Civ, Implementation.PlayerColor col)
        {
            if (Civ == "INFO")
            {
                Civilization = CivilizationType.INFO;

                // Il me faut les positions de départ ! :)
                Teachers = new List<ITeacher>();
                Teachers.Add(new TeacherINFO(this, new Case()));

                Students = new List<IStudent>();
                Students.Add(new StudentINFO(this, new Case()));
            }
            else
            {
                Civilization = CivilizationType.EII;

                Teachers = new List<ITeacher>();
                Teachers.Add(new TeacherEII(this, new Case()));

                Students = new List<IStudent>();
                Students.Add(new StudentEII(this, new Case()));
            }

            Name = name;
            Cities = new List<ICity>();
            Status = StatusType.InGame;
            Color = col;
            Boss = null;
        }

        public virtual void chooseCivilization()
        {
            throw new System.NotImplementedException();
        }

        public virtual void endTurn()
        {
            throw new System.NotImplementedException();
        }

        public virtual void move()
        {
            throw new System.NotImplementedException();
        }

        public virtual void passTurn()
        {
            throw new System.NotImplementedException();
        }

        public virtual void attack()
        {
            throw new System.NotImplementedException();
        }

        public virtual void changeCityProduction()
        {
            throw new System.NotImplementedException();
        }

        public virtual void produceUnits(ICity city, IUnit unit)
        {
            throw new System.NotImplementedException();
        }

    }
}

