//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Implementation
{
	using Interfaces;
	using System;
	using System.Collections.Generic;
	using System.Linq;
    using System.Text;
    using System.Windows.Forms;
    using System.Drawing;
    using MVVM;

    public class Unit : ObservableObject, IUnit
    {
        private int _hp;
        public virtual int HP
        {
            get { return this._hp; }
            set { this.SetAndNotify(ref this._hp, value, () => this._hp); }
        }

        protected int _attackPoints;
        public virtual int AttackPoints
        {
            get { return (int)(this._attackPoints * BossBonus); }
            set { this.SetAndNotify(ref this._attackPoints, value, () => this._attackPoints); }
        }

        protected int _defensePoints;
        public virtual int DefensePoints
        {
            get { return (int)(this._defensePoints * BossBonus); }
            set { this.SetAndNotify(ref this._defensePoints, value, () => this._defensePoints); }
        }

        private int _movePoints;
        public virtual int MovePoints
        {
            get { return this._movePoints; }
            set { this.SetAndNotify(ref this._movePoints, value, () => this._movePoints); }
        }

        public virtual IPlayer Player { get; set; }
        public virtual ICase Case { get; set; }
        public virtual int MaxHP { get; set; }
        public virtual int MaxMovePoints { get; set; }
        public virtual int AttackRange { get; set; }
        public virtual int Cost { get; set; }
        public virtual int CreationTime { get; set; }
        public virtual int Id { get; set; }
        public virtual double BossBonus { get; set; }
        public virtual bool haveAttacked { get; set; }


        public virtual void move(ICase destination)
        {
            MovePoints -= Math.Abs(destination.SqPos[0] - Case.SqPos[0]);
            MovePoints -= Math.Abs(destination.SqPos[1] - Case.SqPos[1]);
            Case.Units.Remove(this);
            Case = destination;
            destination.Units.Add(this);
            if (Player.Boss != null)
            {
                if (Player.Boss.Case == destination)
                    BossBonus = 1.5;
                else
                    BossBonus = 1;
            }
            //Si l'unité a pu se déplacer sur une ville, c'est qu'elle est vide -> il la capture
            if(destination.City != null)
                if(destination.City.Player.Color != Player.Color)
                    destination.City.changeOwner(Player);
        }

        public virtual void passTurn()
        {
            throw new System.NotImplementedException();
        }

        public virtual void defend()
        {
            throw new System.NotImplementedException();
        }

        public virtual void afficher(object sender, PaintEventArgs e, ICaseImageFlyweight fw, int x, int y)
        {
            throw new System.NotImplementedException();
        }
    }
}

